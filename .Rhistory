)
})
output$min_pores <- renderText(paste(input$flowcell_type, "Flow Cell:", min_pores()))
selected <- reactive(getReactableState("samples", "selected"))
output$samples <- renderReactable({
reactable(samples.loris,
groupBy             = c("SampleID"),
details             = seq_subtable,
columns             = columns,
columnGroups        = column_groups,
theme               = format_select,
selection           = "multiple",
defaultExpanded     = TRUE,
onClick             = "select",
filterable          = TRUE,
paginationType      = "simple",
showPageSizeOptions = TRUE,
highlight           = TRUE,
compact             = TRUE,
showSortable        = TRUE,
defaultPageSize     = 20,
height              = "auto")
})
output$selected <- renderPrint({
validate(need(!is.null(selected()), "No rows selected."))
selected()
})
output$adjust_input <- renderUI({
numericInput("input_confirmed", "Adjust input mass (ng) here (optional)", value = mass_ng(), min = 1, max = 2000)
})
working_extracts <- reactive({
req(input$flowcell_type, input$flowcell_num, input$author, input$minion, input$input_confirmed)
samples.loris[selected(), ] %>%
select(
SampleID,
ExtractID_DNA,
ExtractDate_DNA,
ExtractConc_DNA,
ExtractBox_DNA,
ExtractNotes_DNA
) %>%
mutate(TotalRxnVol = 47) %>%
mutate(
SequenceID   = str_glue("{SampleID}-S{row_number()}"),
LibPrepDate  = format(Sys.Date(), "%Y-%m-%d"),
LibPrepKit   = "SQK-LSK114",
FlowCellUsed = input$flowcell_type,
FlowCellNum  = input$flowcell_num,
LibPrepBy    = input$author,
SeqDevice    = input$minion,
LibInputMass = input$input_confirmed,
LibInputVol  = if_else((ExtractConc_DNA * input$input_confirmed) >= TotalRxnVol, TotalRxnVol, (ExtractConc_DNA * input$input_confirmed))) %>%
mutate(LibDilution  = TotalRxnVol - LibInputVol) %>%
relocate(ExtractID_DNA,
ExtractConc_DNA,
LibInputMass,
LibInputVol,
LibDilution,
TotalRxnVol,
LibPrepKit,
LibPrepDate,
LibPrepBy,
FlowCellUsed,
FlowCellNum,
SeqDevice)
})
output$extracts_endprep <- renderReactable({
validate(need(!is.null(working_extracts()), "No extracts to display."))
reactable(working_extracts(),
columns             = list(
ExtractID_DNA     = colDef(name = "Extract ID"),
ExtractConc_DNA   = colDef(name = "Extract Concentration"  , format = colFormat(suffix = ngul)),
LibInputMass      = colDef(name = "Target Mass"            , format = colFormat(suffix = " ng")),
LibInputVol       = colDef(name = "Extract to Add"         , format = colFormat(suffix = ul)),
LibDilution       = colDef(name = "Water to Add"           , format = colFormat(suffix = ul)),
TotalRxnVol       = colDef(name = "Total Rxn Volume"       , format = colFormat(suffix = ul)),
.selection        = colDef(name =  "Check when added", sticky = "left"),
SequenceID        = colDef(show = FALSE),
LibPrepDate       = colDef(show = FALSE),
LibPrepKit        = colDef(show = FALSE),
FlowCellUsed      = colDef(show = FALSE),
FlowCellNum       = colDef(show = FALSE),
LibPrepBy         = colDef(show = FALSE),
SeqDevice         = colDef(show = FALSE),
SampleID          = colDef(show = FALSE),
ExtractDate_DNA   = colDef(show = FALSE),
ExtractBox_DNA    = colDef(show = FALSE),
ExtractNotes_DNA  = colDef(show = FALSE)
),
paginationType      = "simple",
selection           = "multiple",
onClick             = "select",
theme               = format_checklist,
highlight           = TRUE,
compact             = TRUE,
defaultPageSize     = 10,
height              = "auto")
})
n_rxns <- reactive({length(selected())})
endprep_rxn <- reactive({
endprep_tbl <- map_dbl(endprep_vol_per_rxn, \(x) x * n_rxns()) %>%
bind_cols(list_simplify(endprep_reagents),
list_simplify(endprep_vol_per_rxn)) %>%
relocate("...2", "...3", "...1") %>%
arrange("...3")
colnames(endprep_tbl) <- c("Reagent", "Volume_pRxn", "Total_Volume")
endprep_tbl %>%
summarize(Volume_pRxn = sum(Volume_pRxn),
Total_Volume   = sum(Total_Volume)) %>%
mutate(Reagent = "Total") %>%
bind_rows(endprep_tbl) %>%
arrange(Volume_pRxn) %>%
select(Reagent,
Volume_pRxn,
Total_Volume)
})
output$endprep_react <- renderReactable({
reactable(endprep_rxn(),
columns = list(
Reagent      = colDef(name = "Reagent"),
Volume_pRxn  = colDef(name = "Volume per Rxn", format = colFormat(suffix = ul)),
Total_Volume = colDef(name = "Total Volume"  , format = colFormat(suffix = ul)),
.selection   = colDef(name =  "Check when added", sticky = "left")
),
paginationType      = "simple",
selection           = "multiple",
onClick             = "select",
theme               = format_checklist,
highlight           = TRUE,
compact             = TRUE,
defaultPageSize     = 10,
height              = "auto")
})
tubes <- reactive({
working_extracts() %>%
select(ExtractID_DNA) %>%
mutate(Tube = row_number()) %>%
relocate(Tube)
})
output$endprep_tubes <- renderReactable({
reactable(tubes(),
columns = list(
Tube          = colDef(name = "Tube No.", align = "left", maxWidth = 75),
ExtractID_DNA = colDef(name = "Extract ID", align = "left", maxWidth = 150),
.selection    = colDef(name =  "Check when added", sticky = "left")
),
paginationType      = "simple",
selection           = "multiple",
onClick             = "select",
theme               = format_checklist,
highlight           = TRUE,
compact             = TRUE,
defaultPageSize     = 10,
height              = "auto")
})
output$qcresult1 <- renderUI({
card(
card_header("Enter QC Results Below:"),
layout_column_wrap(
iwalk(as.list(working_extracts()$ExtractID_DNA), ~ {
tube   <- .y
sample <- .x
output[[paste0("endprepQC_", tube)]] <- renderUI({
numericInput(
inputId = paste0("qc1_input_", .y),
label   = paste0("Concentration of Tube ", .y, " / Extract ", .x),
value   = NULL,
min     = 0,
max     = 200)
})})))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
session$setCurrentTheme(bs_theme(bootswatch = "lumen"))
observeEvent(input$setup_done    , {nav_select("main.nav", "endprep" )})
observeEvent(input$endprep_done  , {nav_select("main.nav", "adapter" )})
observeEvent(input$adapter_done  , {nav_select("main.nav", "cleanup" )})
observeEvent(input$cleanup_done  , {nav_select("main.nav", "flowcell")})
observeEvent(input$flowcell_done , {nav_select("main.nav", "closer"  )})
step_names <- c(paste0("I.",   1:19, "."),
paste0("II.",  1:7,  "."),
paste0("III.", 1:12, "."),
paste0("IV.",  1:13, "."))
walk(step_names, ~ {
id <- .x
observeEvent(input[[paste0("check_", id)]], {
toggleCssClass(
id = paste0("step_", id),
class = "bg-secondary",
condition = input[[paste0("check_", id)]])
output[[paste0("stamp_", id)]] <- renderText({
if (input[[paste0("check_", id)]]) {
paste(format(Sys.time(), "%Y-%m-%d %H:%M:%S"))
} else {
""
}})})})
walk(step_names, ~ {
id <- .x
observeEvent(input[[paste0("submit_", id)]], {
output[[paste0("note_", id)]] <- renderText({
if (input[[paste0("submit_", id)]]) {
paste(format(Sys.time(), "%Y-%m-%d %H:%M:%S"), input[[paste0("text_", id)]])
} else {
""
}})})})
output$card_I.3.    <- renderUI({page_fluid(card(reactableOutput("extracts_endprep")))})
output$card_I.5.    <- renderUI({page_fluid(card(reactableOutput("endprep_react"),
reactableOutput("endprep_tubes")))})
output$card_I.19.   <- renderUI({page_fluid(
card(class = "bg-dark", card_header("End of Step"),
layout_columns(col_widths = c(2, 10), bs_icon("pause-circle-fill", size = "3em"),
"Take forward the repaired and end-prepped DNA into the adapter ligation step. However, at this point it is also possible to store the sample at 4°C overnight.")), uiOutput("qcresult1"))})
output$card_II.5.   <- renderUI({page_fluid(card(gt_output("rxn_adapter")))})
output$card_III.12. <- renderUI({page_fluid(card(gt_output("input_dna")))})
output$card_IV.2.   <- renderUI({page_fluid(card(gt_output("rxn_flowcell")))})
output$card_IV.3.   <- renderUI({page_fluid(accordion(open = FALSE,
accordion_panel(title = "Illustration", card(layout_columns(col_widths = 1/2, imageOutput("imgIV3a"), imageOutput("imgIV3b"))))))})
output$card_IV.4. <- renderUI({page_fluid(accordion(open = FALSE, accordion_panel(title = "Illustration", card(imageOutput("imgIV4")))))})
output$card_IV.5. <- renderUI({page_fluid(accordion(open = FALSE, accordion_panel(title = "Illustration", card(imageOutput("imgIV5")))))})
output$card_IV.6. <- renderUI({page_fluid(accordion(open = FALSE, accordion_panel(title = "Illustration", card(imageOutput("imgIV6")))))})
output$card_IV.8. <- renderUI({page_fluid(card(gt_output("rxn_sequence")))})
output$card_IV.9. <- renderUI({page_fluid(accordion(open = FALSE,
accordion_panel(title = "Illustration", card(layout_columns(col_widths = 1/2, imageOutput("imgIV9a"), imageOutput("imgIV9b"))))))})
output$card_IV.11. <- renderUI({page_fluid(accordion(open = FALSE, accordion_panel(title = "Illustration", card(imageOutput("imgIV11")))))})
output$card_IV.12. <- renderUI({page_fluid(accordion(open = FALSE,
accordion_panel(title = "Illustration", card(layout_columns(col_widths = 1/2, imageOutput("imgIV12a"), imageOutput("imgIV12b"))))))})
output$card_IV.13. <- renderUI({page_fluid(accordion(open = FALSE,
accordion_panel(title = "Illustration", card(imageOutput("imgIV13")))), card(class = "bg-dark", card_header("End of Step"),
layout_columns(col_widths = c(2, 10), bs_icon("pause-circle-fill", size = "3em"),
"The prepared library is used for loading into the flow cell. Store the library on ice or at 4°C until ready to load.")))})
output$LSK114_tubes <- renderImage({list(src = "attachments/SQK-LSK114_tubes.svg", height = "90%")}, deleteFile = FALSE)
output$imgIV3a      <- renderImage({list(src="attachments/Flow_Cell_Loading_Diagrams_Step_1a.svg"    , height = "90%")}, deleteFile = FALSE)
output$imgIV3b      <- renderImage({list(src="attachments/Flow_Cell_Loading_Diagrams_Step_1b.svg"    , height = "75%")}, deleteFile = FALSE)
output$imgIV4       <- renderImage({list(src="attachments/Flow_Cell_Loading_Diagrams_Step_2.svg"     , height = "75%")}, deleteFile = FALSE)
output$imgIV5       <- renderImage({list(src="attachments/Flow_Cell_Loading_Diagrams_Step_03_V5.gif" , height = "75%")}, deleteFile = FALSE)
output$imgIV6       <- renderImage({list(src="attachments/Flow_Cell_Loading_Diagrams_Step_04_V5.gif" , height = "75%")}, deleteFile = FALSE)
output$imgIV9a      <- renderImage({list(src="attachments/Flow_Cell_Loading_Diagrams_Step_06_V5.gif" , height = "75%")}, deleteFile = FALSE)
output$imgIV11      <- renderImage({list(src="attachments/Flow_Cell_Loading_Diagrams_Step_07_V5.gif" , height = "75%")}, deleteFile = FALSE)
output$imgIV12a     <- renderImage({list(src="attachments/Step_8_update.png"                         , height = "75%")}, deleteFile = FALSE)
output$imgIV12b     <- renderImage({list(src="attachments/Flow_Cell_Loading_Diagrams_Step_9.svg"     , height = "75%")}, deleteFile = FALSE)
output$imgIV13      <- renderImage({list(src="attachments/J2264_-_Light_shield_animation_Flow_Cell_FAW_optimised.gif", height = "75%")}, deleteFile = FALSE)
output$supplies_all      <- render_gt(gt_supplies)
output$kit_contents      <- render_gt(SQK.LSK114.contents)
output$supplies_endprep  <- render_gt(supplies_endprep)
output$supplies_adapter  <- render_gt(supplies_adapter)
output$supplies_cleanup  <- render_gt(supplies_cleanup)
output$supplies_flowcell <- render_gt(supplies_flowcell)
output$input_dna         <- render_gt(input_dna)
output$flowcell_check    <- render_gt(flowcell_check)
output$rxn_endprep       <- render_gt(rxn_endprep)
output$rxn_adapter       <- render_gt(rxn_adapter)
output$rxn_flowcell      <- render_gt(rxn_flowcell)
output$rxn_sequence      <- render_gt(rxn_sequence)
strands <- reactive({
req(input$strands)
as.numeric(input$strands)
})
est_length <- reactive({
req(input$fragments)
case_when(
input$fragments == "1" ~ 10000,
input$fragments == "2" ~ 900,
input$fragments == "3" ~ 2000,
input$fragments == "4" ~ 7000,
input$fragments == "5" ~ 10000
)
})
output$adjust_length <- renderUI({
req(input$fragments)
sliderInput("fragment_length", "Adjust Length (bp) if needed", min = 100, max =  20000, value = est_length())
})
mass_ng <- reactive({
req(input$strands, input$fragment_length)
case_when(
input$fragments == "1" ~ 1000,
input$fragments == "2" ~ (200 * ((input$fragment_length * (307.97*strands())) + (18.02*strands())) * 10^-6),
input$fragments == "3" ~ (150 * ((input$fragment_length * (307.97*strands())) + (18.02*strands())) * 10^-6),
input$fragments == "4" ~ (100 * ((input$fragment_length * (307.97*strands())) + (18.02*strands())) * 10^-6),
input$fragments == "5" ~ 1000
)
})
min_pores <- reactive({
req(input$flowcell_type)
case_when(
input$flowcell_type == "Flongle"    ~ 50,
input$flowcell_type == "MinION"     ~ 800,
input$flowcell_type == "PromethION" ~ 5000
)
})
output$min_pores <- renderText(paste(input$flowcell_type, "Flow Cell:", min_pores()))
selected <- reactive(getReactableState("samples", "selected"))
output$samples <- renderReactable({
reactable(samples.loris,
groupBy             = c("SampleID"),
details             = seq_subtable,
columns             = columns,
columnGroups        = column_groups,
theme               = format_select,
selection           = "multiple",
defaultExpanded     = TRUE,
onClick             = "select",
filterable          = TRUE,
paginationType      = "simple",
showPageSizeOptions = TRUE,
highlight           = TRUE,
compact             = TRUE,
showSortable        = TRUE,
defaultPageSize     = 20,
height              = "auto")
})
output$selected <- renderPrint({
validate(need(!is.null(selected()), "No rows selected."))
selected()
})
output$adjust_input <- renderUI({
numericInput("input_confirmed", "Adjust input mass (ng) here (optional)", value = mass_ng(), min = 1, max = 2000)
})
working_extracts <- reactive({
req(input$flowcell_type, input$flowcell_num, input$author, input$minion, input$input_confirmed)
samples.loris[selected(), ] %>%
select(
SampleID,
ExtractID_DNA,
ExtractDate_DNA,
ExtractConc_DNA,
ExtractBox_DNA,
ExtractNotes_DNA
) %>%
mutate(TotalRxnVol = 47) %>%
mutate(
SequenceID   = str_glue("{SampleID}-S{row_number()}"),
LibPrepDate  = format(Sys.Date(), "%Y-%m-%d"),
LibPrepKit   = "SQK-LSK114",
FlowCellUsed = input$flowcell_type,
FlowCellNum  = input$flowcell_num,
LibPrepBy    = input$author,
SeqDevice    = input$minion,
LibInputMass = input$input_confirmed,
LibInputVol  = if_else((ExtractConc_DNA * input$input_confirmed) >= TotalRxnVol, TotalRxnVol, (ExtractConc_DNA * input$input_confirmed))) %>%
mutate(LibDilution  = TotalRxnVol - LibInputVol) %>%
relocate(ExtractID_DNA,
ExtractConc_DNA,
LibInputMass,
LibInputVol,
LibDilution,
TotalRxnVol,
LibPrepKit,
LibPrepDate,
LibPrepBy,
FlowCellUsed,
FlowCellNum,
SeqDevice)
})
output$extracts_endprep <- renderReactable({
validate(need(!is.null(working_extracts()), "No extracts to display."))
reactable(working_extracts(),
columns             = list(
ExtractID_DNA     = colDef(name = "Extract ID"),
ExtractConc_DNA   = colDef(name = "Extract Concentration"  , format = colFormat(suffix = ngul)),
LibInputMass      = colDef(name = "Target Mass"            , format = colFormat(suffix = " ng")),
LibInputVol       = colDef(name = "Extract to Add"         , format = colFormat(suffix = ul)),
LibDilution       = colDef(name = "Water to Add"           , format = colFormat(suffix = ul)),
TotalRxnVol       = colDef(name = "Total Rxn Volume"       , format = colFormat(suffix = ul)),
.selection        = colDef(name =  "Check when added", sticky = "left"),
SequenceID        = colDef(show = FALSE),
LibPrepDate       = colDef(show = FALSE),
LibPrepKit        = colDef(show = FALSE),
FlowCellUsed      = colDef(show = FALSE),
FlowCellNum       = colDef(show = FALSE),
LibPrepBy         = colDef(show = FALSE),
SeqDevice         = colDef(show = FALSE),
SampleID          = colDef(show = FALSE),
ExtractDate_DNA   = colDef(show = FALSE),
ExtractBox_DNA    = colDef(show = FALSE),
ExtractNotes_DNA  = colDef(show = FALSE)
),
paginationType      = "simple",
selection           = "multiple",
onClick             = "select",
theme               = format_checklist,
highlight           = TRUE,
compact             = TRUE,
defaultPageSize     = 10,
height              = "auto")
})
n_rxns <- reactive({length(selected())})
endprep_rxn <- reactive({
endprep_tbl <- map_dbl(endprep_vol_per_rxn, \(x) x * n_rxns()) %>%
bind_cols(list_simplify(endprep_reagents),
list_simplify(endprep_vol_per_rxn)) %>%
relocate("...2", "...3", "...1") %>%
arrange("...3")
colnames(endprep_tbl) <- c("Reagent", "Volume_pRxn", "Total_Volume")
endprep_tbl %>%
summarize(Volume_pRxn = sum(Volume_pRxn),
Total_Volume   = sum(Total_Volume)) %>%
mutate(Reagent = "Total") %>%
bind_rows(endprep_tbl) %>%
arrange(Volume_pRxn) %>%
select(Reagent,
Volume_pRxn,
Total_Volume)
})
output$endprep_react <- renderReactable({
reactable(endprep_rxn(),
columns = list(
Reagent      = colDef(name = "Reagent"),
Volume_pRxn  = colDef(name = "Volume per Rxn", format = colFormat(suffix = ul)),
Total_Volume = colDef(name = "Total Volume"  , format = colFormat(suffix = ul)),
.selection   = colDef(name =  "Check when added", sticky = "left")
),
paginationType      = "simple",
selection           = "multiple",
onClick             = "select",
theme               = format_checklist,
highlight           = TRUE,
compact             = TRUE,
defaultPageSize     = 10,
height              = "auto")
})
tubes <- reactive({
working_extracts() %>%
select(ExtractID_DNA) %>%
mutate(Tube = row_number()) %>%
relocate(Tube)
})
output$endprep_tubes <- renderReactable({
reactable(tubes(),
columns = list(
Tube          = colDef(name = "Tube No.", align = "left", maxWidth = 75),
ExtractID_DNA = colDef(name = "Extract ID", align = "left", maxWidth = 150),
.selection    = colDef(name =  "Check when added", sticky = "left")
),
paginationType      = "simple",
selection           = "multiple",
onClick             = "select",
theme               = format_checklist,
highlight           = TRUE,
compact             = TRUE,
defaultPageSize     = 10,
height              = "auto")
})
output$qcresult1 <- renderUI({
card(
card_header("Enter QC Results Below:"),
layout_column_wrap(
imap(as.list(working_extracts()$ExtractID_DNA), ~ {
tube   <- .y
sample <- .x
output[[paste0("endprepQC_", tube)]] <- renderUI({
numericInput(
inputId = paste0("qc1_input_", .y),
label   = paste0("Concentration of Tube ", .y, " / Extract ", .x),
value   = NULL,
min     = 0,
max     = 200)
})})))
})
}
shinyApp(ui = ui, server = server)
library(rmdformats)
source(paste0(params$local, "dependencies/setup.R"))
source(paste0(params$local, "dependencies/functions_adaptive.R"))
source(paste0(params$local, "dependencies/setup_adaptive.R"))
source(paste0(params$local, "dependencies/functions_adaptive.R"))
install.packages("downloadthis")
library(downloadthis)
conflicts_prefer(downloadthis::download_file)
source(paste0(params$local, "dependencies/setup.R"))
download_file(
path = system.file(paste0(params$local, "data/Nycticebus-Xanthonycticebus_GenBank_mtDNA.xml"), package = "downloadthis"),
output_name = "Nycticebus-Xanthonycticebus_GenBank_mtDNA",
button_label = "Download Pygmy Loris GenBank Records",
button_type = "danger",
has_icon = TRUE,
icon = "fa fa-save",
self_contained = TRUE
)
download_file(
path = system.file(paste0(params$local, "data/Nycticebus-Xanthonycticebus_GenBank_mtDNA.xml"), package = "downloadthis"),
output_name = "Nycticebus-Xanthonycticebus_GenBank_mtDNA",
button_label = "Download Pygmy Loris GenBank Records",
button_type = "danger",
has_icon = TRUE,
icon = "fa fa-save"
)
download_file(
path = system.file(paste0(params$local, "data/Nycticebus-Xanthonycticebus_GenBank_mtDNA.xml")),
output_name = "Nycticebus-Xanthonycticebus_GenBank_mtDNA",
button_label = "Download Pygmy Loris GenBank Records",
button_type = "danger",
has_icon = TRUE,
icon = "fa fa-save"
)
download_file(
path = paste0(params$local, "data/Nycticebus-Xanthonycticebus_GenBank_mtDNA.xml"),
output_name = "Nycticebus-Xanthonycticebus_GenBank_mtDNA",
button_label = "Download Pygmy Loris GenBank Records",
button_type = "danger",
has_icon = TRUE,
icon = "fa fa-save"
)
download_file(
path = paste0(params$local, "data/Nycticebus-Xanthonycticebus_GenBank_mtDNA.xml"),
output_name = "Nycticebus-Xanthonycticebus_GenBank_mtDNA",
button_label = "Download Pygmy Loris GenBank Records",
button_type = "danger",
has_icon = TRUE,
icon = "fa fa-save",
self_contained = TRUE
)
